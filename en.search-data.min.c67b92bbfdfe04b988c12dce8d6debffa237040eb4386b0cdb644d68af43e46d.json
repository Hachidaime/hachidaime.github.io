[{"id":0,"href":"/docs/fedora/fedora-setup/","title":"Fedora Setup","section":"Fedora","content":" Fedora Setup # Pre Installation # Disk Partitions \u0026amp; Mounting Points # Size Mounting Point 100M /boot/efi 1G swap 40G / 50G /home Post Installation # System Update # sudo dnf update Enable Fusion RPM Repository # sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm sudo dnf install https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm Adding Flathub Repository # flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo Install Multimedia Plugins # sudo dnf install gstreamer1-plugins-{bad-\\*,good-\\*,base} gstreamer1-plugin-openh264 gstreamer1-libav --exclude=gstreamer1-plugins-bad-free-devel sudo dnf install lame\\* --exclude=lame-devel sudo dnf group upgrade --with-optional Multimedia Remove Unused/Bloat Application # Parole Pragha Geany Claws-mail Pidgin Transmission Asunder Xfburn Gnumeric sudo dnf remove parole pragha geany claws-mail pidgin transmission asunder xfburn gnumeric Install Essential Application # You can use the following command to install anything that you need:\nsudo dnf install \u0026lt;package_name\u0026gt; You also can use flatpak to install application:\nflatpak install --user flathub \u0026lt;package_name\u0026gt; Or depends on application you want to install, see application documentation for more detail.\nVarious essential applications you might install:\nSystem Utilities Text Editor Development Multimedia Office Suite Graphics Internet File Transfer Note Taking "},{"id":1,"href":"/docs/applications/system-utilities/kitty/","title":"Kitty","section":"System Utilities","content":" Kitty: Terminal Emulator # Installation # sudo dnf install kitty Configuration # Kitty looks config file depend on OS, usually ~/.config/kitty/kitty.conf. Place current line of code on top of config file to set vim fold method.\n# vim:fileencoding=utf-8:foldmethod=marker Place your sections of configs beetween these lines of code to implement vim fold method.\n#: \u0026lt;Section Name\u0026gt; {{{ # Your configs here... #: }}} Fonts # font_family JetBrainsMono Nerd Font Mono bold_font auto italic_font auto bold_italic_font auto font_size 9.0 force_ltr no disable_ligatures never box_drawing_scale 0.001, 1, 1.5, 2 modify_font cell_height 2px Cursor Customization # cursor_shape underline cursor_beam_thickness 1.5 cursor_underline_thickness 2.0 cursor_blink_interval -1 cursor_stop_blinking_after 15.0 Scrollback # scrollback_lines 2000 scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER scrollback_pager_history_size 0 scrollback_fill_enlarged_window no wheel_scroll_multiplier 5.0 wheel_scroll_min_lines 1 touch_scroll_multiplier 1.0 Mouse # mouse_hide_wait 3.0 url_style curly open_url_with default url_prefixes file ftp ftps gemini git gopher http https irc ircs kitty mailto news sftp ssh detect_urls yes copy_on_select no paste_actions quote-urls-at-prompt strip_trailing_spaces never select_by_word_characters @-./_~?\u0026amp;=%+# click_interval -1.0 focus_follows_mouse no pointer_shape_when_grabbed arrow default_pointer_shape beam pointer_shape_when_dragging beam Mouse Actions # clear_all_mouse_actions no mouse_map left click ungrabbed mouse_handle_click selection link prompt mouse_map shift+left click grabbed,ungrabbed mouse_handle_click selection link prompt mouse_map ctrl+shift+left release grabbed,ungrabbed mouse_handle_click link mouse_map ctrl+shift+left press grabbed discard_event mouse_map middle release ungrabbed paste_from_selection mouse_map left press ungrabbed mouse_selection normal mouse_map ctrl+alt+left press ungrabbed mouse_selection rectangle mouse_map left doublepress ungrabbed mouse_selection word mouse_map left triplepress ungrabbed mouse_selection line mouse_map ctrl+alt+left triplepress ungrabbed mouse_selection line_from_point mouse_map right press ungrabbed mouse_selection extend mouse_map shift+middle release ungrabbed,grabbed paste_selection mouse_map shift+middle press grabbed discard_event mouse_map shift+left press ungrabbed,grabbed mouse_selection normal mouse_map ctrl+shift+alt+left press ungrabbed,grabbed mouse_selection rectangle mouse_map shift+left doublepress ungrabbed,grabbed mouse_selection word mouse_map shift+left triplepress ungrabbed,grabbed mouse_selection line mouse_map ctrl+shift+alt+left triplepress ungrabbed,grabbed mouse_selection line_from_point mouse_map shift+right press ungrabbed,grabbed mouse_selection extend mouse_map ctrl+shift+right press ungrabbed mouse_show_command_output Performance Tuning # repaint_delay 10 input_delay 3 sync_to_monitor yes Terminal Bell # enable_audio_bell yes visual_bell_duration 0.0 window_alert_on_bell yes bell_on_tab \u0026#34;🔔 \u0026#34; command_on_bell none bell_path none Window Layout # remember_window_size yes initial_window_width 640 initial_window_height 400 enabled_layouts * window_resize_step_cells 2 window_resize_step_lines 2 window_border_width 0.5pt draw_minimal_borders yes window_margin_width 0 single_window_margin_width -2 window_padding_width 0 8 placement_strategy center inactive_text_alpha 0.6 hide_window_decorations no window_logo_path none window_logo_position bottom-right window_logo_alpha 0.5 resize_debounce_time 0.1 resize_draw_strategy static resize_in_steps no visual_window_select_characters 1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ confirm_os_window_close -1 Tab Bar # tab_bar_edge top tab_bar_margin_width 0.0 tab_bar_margin_height 0.0 0.0 tab_bar_style custom tab_bar_align left tab_bar_min_tabs 2 tab_switch_strategy previous tab_fade 0.25 0.5 0.75 1 tab_separator \u0026#34; ┇\u0026#34; tab_powerline_style slanted tab_activity_symbol none tab_title_template \u0026#34;{fmt.fg.red}{bell_symbol}{activity_symbol}{fmt.fg.tab}{title}\u0026#34; active_tab_title_template none active_tab_font_style bold-italic inactive_tab_font_style normal Color Scheme # background_opacity 0.92 background_image none background_image_layout tiled background_image_linear no dynamic_background_opacity no background_tint 0.0 dim_opacity 0.75 Color Table # Advanced # shell . editor . close_on_child_death no allow_remote_control no listen_on none update_check_interval 24 startup_session none clipboard_control write-clipboard write-primary read-clipboard-ask read-primary-ask clipboard_max_size 64 allow_hyperlinks yes shell_integration no-cursor enabled allow_cloning ask clone_source_strategies venv,conda,env_var,path term xterm-kitty OS Specific Tweaks # macos_option_as_alt no macos_hide_from_tasks no macos_quit_when_last_window_closed no macos_window_resizable yes macos_thicken_font 0 macos_traditional_fullscreen no macos_show_window_title_in all macos_menubar_title_max_length 0 macos_custom_beam_cursor no macos_colorspace srgb linux_display_server auto Keyboard Shortcuts # kitty_mod ctrl+shift clear_all_shortcuts no Clipboard # map kitty_mod+c copy_to_clipboard map cmd+c copy_to_clipboard map kitty_mod+v paste_from_clipboard map cmd+v paste_from_clipboard map kitty_mod+s paste_from_selection map shift+insert paste_from_selection map kitty_mod+o pass_selection_to_program Scrolling # map kitty_mod+up scroll_line_up map kitty_mod+k scroll_line_up map opt+cmd+page_up scroll_line_up map cmd+up scroll_line_up map kitty_mod+down scroll_line_down map kitty_mod+j scroll_line_down map opt+cmd+page_down scroll_line_down map cmd+down scroll_line_down map kitty_mod+page_up scroll_page_up map cmd+page_up scroll_page_up map kitty_mod+page_down scroll_page_down map cmd+page_down scroll_page_down map kitty_mod+home scroll_home map cmd+home scroll_home map kitty_mod+end scroll_end map cmd+end scroll_end map kitty_mod+z scroll_to_prompt -1 map kitty_mod+x scroll_to_prompt 1 map kitty_mod+h show_scrollback map kitty_mod+g show_last_command_output Window Management # map kitty_mod+enter new_window map cmd+enter new_window map kitty_mod+n new_os_window map cmd+n new_os_window map kitty_mod+w close_window map shift+cmd+d close_window map kitty_mod+] next_window map kitty_mod+[ previous_window map kitty_mod+f move_window_forward map kitty_mod+b move_window_backward map kitty_mod+` move_window_to_top map kitty_mod+r start_resizing_window map cmd+r start_resizing_window map kitty_mod+1 first_window map cmd+1 first_window map kitty_mod+2 second_window map cmd+2 second_window map kitty_mod+3 third_window map cmd+3 third_window map kitty_mod+4 fourth_window map cmd+4 fourth_window map kitty_mod+5 fifth_window map cmd+5 fifth_window map kitty_mod+6 sixth_window map cmd+6 sixth_window map kitty_mod+7 seventh_window map cmd+7 seventh_window map kitty_mod+8 eighth_window map cmd+8 eighth_window map kitty_mod+9 ninth_window map cmd+9 ninth_window map kitty_mod+0 tenth_window map kitty_mod+f7 focus_visible_window map kitty_mod+f8 swap_with_window map shift+up move_window up map shift+left move_window left map shift+right move_window right map shift+down move_window down map alt+left neighboring_window left map alt+right neighboring_window right map alt+up neighboring_window up map alt+down neighboring_window down Tab Management # map shift+cmd+] next_tab map ctrl+tab next_tab map ctrl+page_down next_tab map shift+cmd+[ previous_tab map ctrl+shift+tab previous_tab map ctrl+page_up previous_tab map kitty_mod+t new_tab map cmd+t new_tab map kitty_mod+q close_tab map cmd+w close_tab map shift+cmd+w close_os_window map kitty_mod+. move_tab_forward map kitty_mod+, move_tab_backward map kitty_mod+alt+t set_tab_title map shift+cmd+i set_tab_title Layout Management # map kitty_mod+l next_layout map kitty_mod+left resize_window narrower map kitty_mod+right resize_window wider map kitty_mod+up resize_window taller map kitty_mod+down resize_window shorter 3 map ctrl+home resize_window reset Font Sizes # map kitty_mod+equal change_font_size all +2.0 map kitty_mod+plus change_font_size all +2.0 map kitty_mod+kp_add change_font_size all +2.0 map cmd+plus change_font_size all +2.0 map cmd+equal change_font_size all +2.0 map shift+cmd+equal change_font_size all +2.0 map kitty_mod+minus change_font_size all -2.0 map kitty_mod+kp_subtract change_font_size all -2.0 map cmd+minus change_font_size all -2.0 map shift+cmd+minus change_font_size all -2.0 map kitty_mod+backspace change_font_size all 0 map cmd+0 change_font_size all 0 Select and Act on Visible Text # map kitty_mod+e open_url_with_hints map kitty_mod+p\u0026gt;f kitten hints --type path --program - map kitty_mod+p\u0026gt;shift+f kitten hints --type path map kitty_mod+p\u0026gt;l kitten hints --type line --program - map kitty_mod+p\u0026gt;w kitten hints --type word --program - map kitty_mod+p\u0026gt;h kitten hints --type hash --program - map kitty_mod+p\u0026gt;n kitten hints --type linenum map kitty_mod+p\u0026gt;y kitten hints --type hyperlink Miscellaneous # map kitty_mod+f1 show_kitty_doc overview map kitty_mod+f11 toggle_fullscreen map ctrl+cmd+f toggle_fullscreen map kitty_mod+f10 toggle_maximized map opt+cmd+s toggle_macos_secure_keyboard_entry map kitty_mod+u kitten unicode_input map ctrl+cmd+space kitten unicode_input map kitty_mod+f2 edit_config_file map cmd+, edit_config_file map kitty_mod+escape kitty_shell window map kitty_mod+a\u0026gt;m set_background_opacity +0.1 map kitty_mod+a\u0026gt;l set_background_opacity -0.1 map kitty_mod+a\u0026gt;1 set_background_opacity 1 map kitty_mod+a\u0026gt;d set_background_opacity default map kitty_mod+delete clear_terminal reset active map opt+cmd+r clear_terminal reset active map cmd+k clear_terminal to_cursor active map kitty_mod+f5 load_config_file map ctrl+cmd+, load_config_file map kitty_mod+f6 debug_config map opt+cmd+, debug_config map shift+cmd+/ open_url https://sw.kovidgoyal.net/kitty/ Include Theme # include current-theme.conf Color Scheme # You can set color scheme configuration in Color Table section on config file (~/.config/kitty/kitty.conf). But for better files management, place it in separated file (~/.config/kitty/current-theme.conf). background #1c262b foreground #c1c8d6 cursor #b2b8c3 selection_background #6dc1b8 color0 #000000 color8 #767676 color1 #ee2a29 color9 #dc5b60 color2 #3fa33f color10 #70be71 color3 #fee92e color11 #fef063 color4 #1d80ef color12 #53a4f3 color5 #8800a0 color13 #a94dbb color6 #16aec9 color14 #42c6d9 color7 #a4a4a4 color15 #fffefe selection_foreground #1c262b Generate Color Scheme # You can generate color scheme from repository.\nkitty +kitten themes Then select the theme you want.\nTab Bar # If you set tab_bar_style custom, you must create tab_bar configuration file (~/.config/kitty/tab_bar.py). # pyright: reportMissingImports=false from datetime import datetime from kitty.boss import get_boss from kitty.fast_data_types import Screen, add_timer, get_options from kitty.utils import color_as_int from kitty.tab_bar import ( DrawData, ExtraData, Formatter, TabBarData, as_rgb, draw_attributed_string, draw_title, ) opts = get_options() icon_fg = as_rgb(color_as_int(opts.color10)) icon_bg = as_rgb(color_as_int(opts.color0)) bat_text_color = as_rgb(color_as_int(opts.color15)) clock_color = as_rgb(color_as_int(opts.color13)) date_color = as_rgb(color_as_int(opts.color14)) SEPARATOR_SYMBOL, SOFT_SEPARATOR_SYMBOL = (\u0026#34;\\ue0bc\u0026#34;, \u0026#34;\\ue0bd\u0026#34;) RIGHT_MARGIN = 1 REFRESH_TIME = 1 ICON = \u0026#34; \\ue272 \u0026#34; UNPLUGGED_ICONS = { 10: \u0026#34;\\uf579\u0026#34;, 20: \u0026#34;\\uf57a\u0026#34;, 30: \u0026#34;\\uf57b\u0026#34;, 40: \u0026#34;\\uf57c\u0026#34;, 50: \u0026#34;\\uf57d\u0026#34;, 60: \u0026#34;\\uf57e\u0026#34;, 70: \u0026#34;\\uf57f\u0026#34;, 80: \u0026#34;\\uf580\u0026#34;, 90: \u0026#34;\\uf581\u0026#34;, 100: \u0026#34;\\uf578\u0026#34;, } PLUGGED_ICONS = { 1: \u0026#34;\\uf583\u0026#34;, } UNPLUGGED_COLORS = { 15: as_rgb(color_as_int(opts.color1)), 16: as_rgb(color_as_int(opts.color15)), } PLUGGED_COLORS = { 15: as_rgb(color_as_int(opts.color1)), 16: as_rgb(color_as_int(opts.color6)), 99: as_rgb(color_as_int(opts.color6)), 100: as_rgb(color_as_int(opts.color2)), } def _draw_icon(screen: Screen, index: int) -\u0026gt; int: if index != 1: return 0 fg, bg = screen.cursor.fg, screen.cursor.bg screen.cursor.fg = icon_fg screen.cursor.bg = icon_bg screen.draw(ICON) screen.cursor.fg, screen.cursor.bg = fg, bg screen.cursor.x = len(ICON) return screen.cursor.x def _draw_left_status( draw_data: DrawData, screen: Screen, tab: TabBarData, before: int, max_title_length: int, index: int, is_last: bool, extra_data: ExtraData, ) -\u0026gt; int: if screen.cursor.x \u0026gt;= screen.columns - right_status_length: return screen.cursor.x tab_bg = screen.cursor.bg tab_fg = screen.cursor.fg default_bg = as_rgb(int(draw_data.default_bg)) if extra_data.next_tab: next_tab_bg = as_rgb(draw_data.tab_bg(extra_data.next_tab)) needs_soft_separator = next_tab_bg == tab_bg else: next_tab_bg = default_bg needs_soft_separator = False if screen.cursor.x \u0026lt;= len(ICON): screen.cursor.x = len(ICON) screen.draw(\u0026#34; \u0026#34;) screen.cursor.bg = tab_bg draw_title(draw_data, screen, tab, index) if not needs_soft_separator: screen.draw(\u0026#34; \u0026#34;) screen.cursor.fg = tab_bg screen.cursor.bg = next_tab_bg screen.draw(SEPARATOR_SYMBOL) else: prev_fg = screen.cursor.fg if tab_bg == tab_fg: screen.cursor.fg = default_bg elif tab_bg != default_bg: c1 = draw_data.inactive_bg.contrast(draw_data.default_bg) c2 = draw_data.inactive_bg.contrast(draw_data.inactive_fg) if c1 \u0026lt; c2: screen.cursor.fg = default_bg screen.draw(\u0026#34; \u0026#34; + SOFT_SEPARATOR_SYMBOL) screen.cursor.fg = prev_fg end = screen.cursor.x return end def _draw_right_status(screen: Screen, is_last: bool, cells: list) -\u0026gt; int: if not is_last: return 0 draw_attributed_string(Formatter.reset, screen) screen.cursor.x = screen.columns - right_status_length screen.cursor.fg = 0 for color, status in cells: screen.cursor.fg = color screen.draw(status) screen.cursor.bg = 0 return screen.cursor.x def _redraw_tab_bar(_): tm = get_boss().active_tab_manager if tm is not None: tm.mark_tab_bar_dirty() def get_battery_cells() -\u0026gt; list: try: with open(\u0026#34;/sys/class/power_supply/BAT0/status\u0026#34;, \u0026#34;r\u0026#34;) as f: status = f.read() with open(\u0026#34;/sys/class/power_supply/BAT0/capacity\u0026#34;, \u0026#34;r\u0026#34;) as f: percent = int(f.read()) if status == \u0026#34;Discharging\\n\u0026#34;: # TODO: declare the lambda once and don\u0026#39;t repeat the code icon_color = UNPLUGGED_COLORS[ min(UNPLUGGED_COLORS.keys(), key=lambda x: abs(x - percent)) ] icon = UNPLUGGED_ICONS[ min(UNPLUGGED_ICONS.keys(), key=lambda x: abs(x - percent)) ] elif status == \u0026#34;Not charging\\n\u0026#34;: icon_color = UNPLUGGED_COLORS[ min(UNPLUGGED_COLORS.keys(), key=lambda x: abs(x - percent)) ] icon = PLUGGED_ICONS[ min(PLUGGED_ICONS.keys(), key=lambda x: abs(x - percent)) ] else: icon_color = PLUGGED_COLORS[ min(PLUGGED_COLORS.keys(), key=lambda x: abs(x - percent)) ] icon = PLUGGED_ICONS[ min(PLUGGED_ICONS.keys(), key=lambda x: abs(x - percent)) ] percent_cell = (bat_text_color, str(percent) + \u0026#34;% \u0026#34;) icon_cell = (icon_color, icon) return [percent_cell, icon_cell] except FileNotFoundError: return [] timer_id = None right_status_length = -1 def draw_tab( draw_data: DrawData, screen: Screen, tab: TabBarData, before: int, max_title_length: int, index: int, is_last: bool, extra_data: ExtraData, ) -\u0026gt; int: global timer_id global right_status_length if timer_id is None: timer_id = add_timer(_redraw_tab_bar, REFRESH_TIME, True) clock = datetime.now().strftime(\u0026#34; %H:%M\u0026#34;) date = datetime.now().strftime(\u0026#34; %d.%m.%Y\u0026#34;) cells = get_battery_cells() cells.append((clock_color, clock)) cells.append((date_color, date)) right_status_length = RIGHT_MARGIN for cell in cells: right_status_length += len(str(cell[1])) _draw_icon(screen, index) _draw_left_status( draw_data, screen, tab, before, max_title_length, index, is_last, extra_data, ) _draw_right_status( screen, is_last, cells, ) return screen.cursor.x Official Website # https://sw.kovidgoyal.net/kitty/\n"},{"id":2,"href":"/docs/applications/text-editor/neovim/","title":"Neovim","section":"Text Editor","content":" Neovim # Installation # sudo dnf copr enable agriffis/neovim-nightly sudo dnf install -y neovim python3-neovim Configuration # For configuration see Neovim Configuration with Lua\n"},{"id":3,"href":"/docs/applications/system-utilities/","title":"System Utilities","section":"Applications","content":" System Utilities # Kitty # sudo dnf install kitty For more detail see Kitty Configuration.\nFish # sudo dnf install fish-shell For more detail see Fish Configuration.\nOh-My-Fish # curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish tldr # sudo dnf install tldr Htop # sudo dnf install htop Sensors # sudo dnf install sensors Nload # sudo dnf install nload uLauncher # sudo dnf install ulauncher Unzip # sudo dnf install unzip Unrar # sudo dnf install unrar Curl # sudo dnf install curl Wget # sudo dnf install wget Font Manager # flatpak install --user flathub org.gnome.FontManager "},{"id":4,"href":"/docs/applications/system-utilities/fish/","title":"Fish","section":"System Utilities","content":" Fish: Comman Line Shell # Installation # sudo dnf install fish-shell Configuration # Kitty looks config file depend on OS, usually ~/.config/fish/config.fish. if status is-interactive # Commands to run in interactive sessions can go here end # Clear Greeting set -U fish_greeting \u0026#34;\u0026#34; Path Environment # Simple way to add directory to $PATH environment:\nadd_to_path path Alias # Simple way to add and save alias:\nalias -s NAME=DEFINITION Official Website # https://fishshell.com/\n"},{"id":5,"href":"/docs/applications/text-editor/","title":"Text Editor","section":"Applications","content":" Text Editor # Vim # sudo dnf install vim Neovim nightly # sudo dnf copr enable agriffis/neovim-nightly sudo dnf install -y neovim python3-neovim For more detail see Neovim Configuration.\nVSCode # flatpak install --user flathub com.visualstudio.code "},{"id":6,"href":"/docs/applications/development/","title":"Development","section":"Applications","content":" Development # Added soon.\n"},{"id":7,"href":"/docs/applications/multimedia/","title":"Multimedia","section":"Applications","content":" Multimedia # MPV # sudo dnf install mpv Cmus # sudo dnf install cmus Spotify # flatpak install --user flathub com.spotify.Client Audacity # flatpak install --user flathub org.audacityteam.Audacity Kdenlive # flatpak install --user flathub org.kde.kdenlive "},{"id":8,"href":"/docs/applications/office-suite/","title":"Office Suite","section":"Applications","content":" Office Suite # LibreOffice # flatpak install --user flathub org.libreoffice.LibreOffice OnlyOffice # flatpak install --user flathub org.onlyoffice.desktopeditors "},{"id":9,"href":"/posts/toggleterm/","title":"Manage Neovim Terminal with Toggleterm","section":"Blog","content":"Toggleterm a Neovim lua plugin to help easily manage multiple terminal windows.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;akinsho/toggleterm.nvim\u0026#39; Configuration # Create config file ~/.config/nvim/toggleterm-config/init.lua: ~/.config/nvim/lua/toggleterm-config/init.lua 1 2 3 4 5 6 7 8 9 10 require \u0026#34;toggleterm\u0026#34;.setup { size = 8, open_mapping = [[\u0026lt;c-\\\u0026gt;]], shade_filetypes = {}, shade_terminals = true, shading_factor = \u0026#39;1\u0026#39;, start_in_insert = true, persist_size = true, direction = \u0026#39;horizontal\u0026#39; } Require config in ~/.config/nvim/init.lua. require(\u0026#39;toggleterm-config\u0026#39;) See Also # Neovim Configuration with Lua To Do # Configure Which-key keymaps "},{"id":10,"href":"/posts/colorizer/","title":"Visualise Colour in Neovim with Colorizer","section":"Blog","content":"Colorizer is a high-performance color highlighter for Neovim which has no external dependencies! Written in performant Luajit.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;norcalli/nvim-colorizer.lua\u0026#39; Configuration # Create config file ~/.config/nvim/colorizer-config/init.lua: 1 2 3 4 require \u0026#39;colorizer\u0026#39;.setup { \u0026#39;*\u0026#39;; -- Highlight all files, but customize some others. css = { css = true; }; -- Enable parsing rgb(...) functions in css. } Require config in ~/.config/nvim/init.lua. require(\u0026#39;colorizer-config\u0026#39;) See Also # Neovim Configuration with Lua "},{"id":11,"href":"/posts/dashboard/","title":"Customize Neovim Start Screen with Dashboard-nvim","section":"Blog","content":"dashboard-nvim is a fancy fastest async start screen plugins for Neovim.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;glepnir/dashboard-nvim\u0026#39; Configuration # Create config file ~/.config/nvim/dashboard-config/init.lua: ~/.config/nvim/lua/dashboard-config/init.lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 local db = require(\u0026#39;dashboard\u0026#39;) db.custom_header = { \u0026#39; ████████ \u0026#39;, \u0026#39; ████ ████ \u0026#39;, \u0026#39; ██ ████████ ██ ████████ \u0026#39;, \u0026#39; ██ ████ ████ ██ ██ ██ \u0026#39;, \u0026#39; ██ ██ ████ ██ ██ ██ ████ ██ \u0026#39;, \u0026#39; ██ ██ ██ ██ ██ ██████ ██ ██ ██ \u0026#39;, \u0026#39; ██ ██ ██ ██ ██ ██ ██ ██ \u0026#39;, \u0026#39; ██ ██ ██ ██ ██ ██ ██ ██ \u0026#39;, \u0026#39; ██ ██ ██ ██ ██ ██████ ██ ██ ██ \u0026#39;, \u0026#39; ██ ██ ████ ██ ██ ██ ████ ██ \u0026#39;, \u0026#39; ██ ████ ████ ██ ██ ██ \u0026#39;, \u0026#39; ██ ████████ ██ ████████ \u0026#39;, \u0026#39; ████ ████ \u0026#39;, \u0026#39; ████████ \u0026#39;, } db.custom_center = { { icon = \u0026#39; \u0026#39;, desc = \u0026#39;Find Files \u0026#39;, action = \u0026#39;Telescope find_files\u0026#39;, shortcut = \u0026#39;\\\\ f f\u0026#39; }, { icon = \u0026#39; \u0026#39;, desc = \u0026#39;Search Text \u0026#39;, action = \u0026#39;Telescope live_grep\u0026#39;, shortcut = \u0026#39;\\\\ f g\u0026#39; }, { icon = \u0026#39; \u0026#39;, desc = \u0026#39;Recent Files \u0026#39;, action = \u0026#39;Telescope oldfiles\u0026#39;, shortcut = \u0026#39;\\\\ f r\u0026#39; }, { icon = \u0026#39; \u0026#39;, desc = \u0026#39;Quit \u0026#39;, action = \u0026#39;q\u0026#39;, shortcut = \u0026#39;\\\\ q \u0026#39; } } db.custom_footer = { \u0026#34;There are two ways to be fooled.\u0026#34;, \u0026#34;One is to believe what isn\u0026#39;t true; the other is to refuse to believe what is true.\u0026#34;, \u0026#34;~ Søren Kierkegaard\u0026#34; } db.header_pad = 3 db.center_pad = 3 db.footer_pad = 3 db.hide_statusline = true Require config in ~/.config/nvim/init.lua. require(\u0026#39;dashboard-config\u0026#39;) See Also # Neovim Configuration with Lua To Do # Configure Which-key keymaps "},{"id":12,"href":"/posts/gitsign/","title":"Git integration for Neovim buffers with Gitsigns","section":"Blog","content":"Gitsign is super fast git decorations implemented purely in lua/teal.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;lewis6991/gitsigns.nvim\u0026#39; Configuration # Create config file ~/.config/nvim/gitsigns-config/init.lua: require(\u0026#39;gitsigns\u0026#39;).setup() See Also # Neovim Configuration with Lua To Do # Configure Which-key keymaps "},{"id":13,"href":"/posts/telescope/","title":"Neovim File Finder using Telescope","section":"Blog","content":"telescope.nvim is a highly extendable fuzzy finder over lists. Built on the latest awesome features from neovim core. Telescope is centered around modularity, allowing for easy customization.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): nvim-lua/plenary.nvim is required.\nuse \u0026#39;nvim-lua/plenary.nvim\u0026#39; use \u0026#39;nvim-telescope/telescope.nvim\u0026#39; Configuration # Create config file ~/.config/nvim/telescope-config/init.lua: ~/.config/nvim/lua/telescope-config/init.lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 local actions = require(\u0026#39;telescope.actions\u0026#39;) require(\u0026#39;telescope\u0026#39;).setup { defaults = { layout_config = { width = 0.8, preview_width = 0.6, prompt_position = \u0026#34;top\u0026#34;, -- preview_cutoff = 10, horizontal = { mirror = false }, vertical = { mirror = false } }, find_command = { \u0026#39;rg\u0026#39;, \u0026#39;--no-heading\u0026#39;, \u0026#39;--with-filename\u0026#39;, \u0026#39;--line-number\u0026#39;, \u0026#39;--column\u0026#39;, \u0026#39;--smart-case\u0026#39; }, -- prompt_prefix = \u0026#34; \u0026#34;, prompt_prefix = \u0026#34; \u0026#34;, -- selection_caret = \u0026#34; \u0026#34;, selection_caret = \u0026#34; \u0026#34;, entry_prefix = \u0026#34; \u0026#34;, initial_mode = \u0026#34;insert\u0026#34;, selection_strategy = \u0026#34;reset\u0026#34;, sorting_strategy = \u0026#34;ascending\u0026#34;, layout_strategy = \u0026#34;horizontal\u0026#34;, file_sorter = require \u0026#39;telescope.sorters\u0026#39;.get_fuzzy_file, file_ignore_patterns = {}, generic_sorter = require \u0026#39;telescope.sorters\u0026#39;.get_generic_fuzzy_sorter, path_display = {}, winblend = 0, border = {}, -- borderchars = { \u0026#39;─\u0026#39;, \u0026#39;│\u0026#39;, \u0026#39;─\u0026#39;, \u0026#39;│\u0026#39;, \u0026#39;╭\u0026#39;, \u0026#39;╮\u0026#39;, \u0026#39;╯\u0026#39;, \u0026#39;╰\u0026#39; }, borderchars = { \u0026#39;─\u0026#39;, \u0026#39;│\u0026#39;, \u0026#39;═\u0026#39;, \u0026#39;│\u0026#39;, \u0026#39;┌\u0026#39;, \u0026#39;┐\u0026#39;, \u0026#39;╛\u0026#39;, \u0026#39;╘\u0026#39; }, color_devicons = true, use_less = true, set_env = { [\u0026#39;COLORTERM\u0026#39;] = \u0026#39;truecolor\u0026#39; }, -- default = nil, file_previewer = require \u0026#39;telescope.previewers\u0026#39;.vim_buffer_cat.new, grep_previewer = require \u0026#39;telescope.previewers\u0026#39;.vim_buffer_vimgrep.new, qflist_previewer = require \u0026#39;telescope.previewers\u0026#39;.vim_buffer_qflist.new, buffer_previewer_maker = require \u0026#39;telescope.previewers\u0026#39;.buffer_previewer_maker, mappings = { i = { [\u0026#34;\u0026lt;C-j\u0026gt;\u0026#34;] = actions.move_selection_next, [\u0026#34;\u0026lt;C-k\u0026gt;\u0026#34;] = actions.move_selection_previous, [\u0026#34;\u0026lt;C-q\u0026gt;\u0026#34;] = actions.smart_send_to_qflist + actions.open_qflist, [\u0026#34;\u0026lt;esc\u0026gt;\u0026#34;] = actions.close, [\u0026#34;\u0026lt;CR\u0026gt;\u0026#34;] = actions.select_default + actions.center }, n = { [\u0026#34;\u0026lt;C-j\u0026gt;\u0026#34;] = actions.move_selection_next, [\u0026#34;\u0026lt;C-k\u0026gt;\u0026#34;] = actions.move_selection_previous, [\u0026#34;\u0026lt;C-q\u0026gt;\u0026#34;] = actions.smart_send_to_qflist + actions.open_qflist } } }, } Require config in ~/.config/nvim/init.lua. require(\u0026#39;telescope-config\u0026#39;) See Also # Neovim Configuration with Lua To Do # Configure Which-key keymaps "},{"id":14,"href":"/posts/bufferline/","title":"Manage Neovim Buffers with Bufferline","section":"Blog","content":"Bufferline is buffer line (with tabpage integration) for Neovim built using lua.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;akinsho/bufferline.nvim\u0026#39; Configuration # Create config file ~/.config/nvim/bufferline-config/init.lua: ~/.config/nvim/lua/bufferline-config/init.lua 1 2 3 4 5 6 7 8 9 10 11 require(\u0026#34;bufferline\u0026#34;).setup { options = { modified_icon = \u0026#39;●\u0026#39;, close_icon = \u0026#39;\u0026#39;, separator_style = \u0026#39;thin\u0026#39;, indicator = { icon = \u0026#39;█ \u0026#39;, style = \u0026#39;icon\u0026#39; } }, } Require config in ~/.config/nvim/init.lua. require(\u0026#39;bufferline-config\u0026#39;) See Also # Neovim Configuration with Lua To Do # Configure Which-key keymaps "},{"id":15,"href":"/posts/lualine/","title":"Customize Neovim Statusline with Lualine","section":"Blog","content":"Lualine a blazing fast and easy to configure Neovim statusline written in Lua.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;nvim-lualine/lualine.nvim\u0026#39; Configuration # In this case I use evil_lualine, and make some modification.\nCreate config file ~/.config/nvim/lualine-config/eviline.lua: ~/.config/nvim/lua/lualine-config/eviline.lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 -- Eviline config for lualine -- Author: shadmansaleh -- Credit: glepnir local lualine = require(\u0026#39;lualine\u0026#39;) -- Color table for highlights -- stylua: ignore local colors = { bg = \u0026#39;#202328\u0026#39;, fg = \u0026#39;#bbc2cf\u0026#39;, yellow = \u0026#39;#ECBE7B\u0026#39;, cyan = \u0026#39;#008080\u0026#39;, darkblue = \u0026#39;#081633\u0026#39;, green = \u0026#39;#98be65\u0026#39;, orange = \u0026#39;#FF8800\u0026#39;, violet = \u0026#39;#a9a1e1\u0026#39;, magenta = \u0026#39;#c678dd\u0026#39;, blue = \u0026#39;#51afef\u0026#39;, red = \u0026#39;#ec5f67\u0026#39;, Opal = \u0026#39;#8fbcbb\u0026#39;, FuzzyWuzzy = \u0026#39;#bf616a\u0026#39;, OperaMauve = \u0026#39;#b48ead\u0026#39;, DarkSeaGreen = \u0026#39;#a3be8c\u0026#39;, CopperCrayola = \u0026#39;#d08770\u0026#39;, BrightNavyBlue = \u0026#39;#007acc\u0026#39;, DeepJungleGreen = \u0026#39;#005f5f\u0026#39; } local conditions = { buffer_not_empty = function() return vim.fn.empty(vim.fn.expand(\u0026#39;%:t\u0026#39;)) ~= 1 end, hide_in_width = function() return vim.fn.winwidth(0) \u0026gt; 80 end, check_git_workspace = function() local filepath = vim.fn.expand(\u0026#39;%:p:h\u0026#39;) local gitdir = vim.fn.finddir(\u0026#39;.git\u0026#39;, filepath .. \u0026#39;;\u0026#39;) return gitdir and #gitdir \u0026gt; 0 and #gitdir \u0026lt; #filepath end } -- Config local config = { options = { -- Disable sections and component separators component_separators = \u0026#39;\u0026#39;, section_separators = \u0026#39;\u0026#39;, theme = { -- We are going to use lualine_c an lualine_x as left and -- right section. Both are highlighted by c theme . So we -- are just setting default looks o statusline normal = { c = { fg = colors.fg, bg = colors.bg } }, inactive = { c = { fg = colors.fg, bg = colors.bg } } } }, sections = { -- these are to remove the defaults lualine_a = {}, lualine_b = {}, lualine_y = {}, lualine_z = {}, -- These will be filled later lualine_c = {}, lualine_x = {} }, inactive_sections = { -- these are to remove the defaults lualine_a = {}, lualine_b = {}, lualine_y = {}, lualine_z = {}, lualine_c = {}, lualine_x = {} } } local mode_color = { n = colors.Opal, i = colors.FuzzyWuzzy, v = colors.OperaMauve, [\u0026#39;\u0016\u0026#39;] = colors.DarkSeaGreen, V = colors.OperaMauve, c = colors.blue, no = colors.Opal, s = colors.blue, S = colors.blue, [\u0026#39;\u0013\u0026#39;] = colors.blue, ic = colors.FuzzyWuzzy, R = colors.CopperCrayola, Rv = colors.CopperCrayola, cv = colors.blue, ce = colors.blue, r = colors.CopperCrayola, rm = colors.blue, [\u0026#39;r?\u0026#39;] = colors.CopperCrayola, [\u0026#39;!\u0026#39;] = colors.blue, t = colors.DeepJungleGreen } -- Inserts a component in lualine_c at left section local function ins_left(component) table.insert(config.sections.lualine_c, component) end -- Inserts a component in lualine_x ot right section local function ins_right(component) table.insert(config.sections.lualine_x, component) end ins_left { \u0026#39;mode\u0026#39;, color = function() -- auto change color according to neovims mode return { fg = colors.bg, bg = mode_color[vim.fn.mode()], gui = \u0026#39;bold\u0026#39; } end } ins_left { function() return \u0026#39;\u0026#39; end, -- color = { fg = colors.blue }, -- Sets highlighting of component color = function() -- auto change color according to neovims mode return { fg = mode_color[vim.fn.mode()] } end, padding = { left = 0, right = 1 } -- We don\u0026#39;t need space before this } ins_left { -- mode component function() -- return \u0026#39;\u0026#39; -- return \u0026#39;\u0026#39; -- return \u0026#39;\u0026#39; return \u0026#39;\u0026#39; end, color = function() -- auto change color according to neovims mode return { fg = mode_color[vim.fn.mode()], gui = \u0026#39;bold\u0026#39; } end, padding = { right = 1 } } ins_left { -- filesize component \u0026#39;filesize\u0026#39;, cond = conditions.buffer_not_empty } ins_left { \u0026#39;filetype\u0026#39;, icon_only = true } ins_left { \u0026#39;filename\u0026#39;, cond = conditions.buffer_not_empty, color = { fg = colors.magenta, gui = \u0026#39;bold\u0026#39; }, path = 1, file_status = true, symbols = { modified = \u0026#39;\u0026#39;, -- Text to show when the file is modified. readonly = \u0026#39;\u0026#39;, -- Text to show when the file is non-modifiable or readonly. unnamed = \u0026#39;\u0026#39;, -- Text to show for unnamed buffers. newfile = \u0026#39;\u0026#39; -- Text to show for new created file before first writting } } ins_left { \u0026#39;location\u0026#39; } ins_left { \u0026#39;progress\u0026#39;, color = { fg = colors.fg, gui = \u0026#39;bold\u0026#39; } } ins_left { \u0026#39;diagnostics\u0026#39;, sources = { \u0026#39;nvim_diagnostic\u0026#39; }, symbols = { error = \u0026#39; \u0026#39;, warn = \u0026#39; \u0026#39;, info = \u0026#39; \u0026#39; }, diagnostics_color = { error = { fg = colors.red }, warn = { fg = colors.yellow }, info = { fg = colors.cyan } } } -- Insert mid section. You can make any number of sections in neovim :) -- for lualine it\u0026#39;s any number greater then 2 ins_left { function() return \u0026#39;%=\u0026#39; end } ins_left { -- Lsp server name . function() local msg = \u0026#39;No Active Lsp\u0026#39; local buf_ft = vim.api.nvim_buf_get_option(0, \u0026#39;filetype\u0026#39;) local clients = vim.lsp.get_active_clients() if next(clients) == nil then return msg end for _, client in ipairs(clients) do local filetypes = client.config.filetypes if filetypes and vim.fn.index(filetypes, buf_ft) ~= -1 then return client.name end end return msg end, icon = \u0026#39; LSP:\u0026#39;, -- color = { fg = \u0026#39;#000000\u0026#39;, gui = \u0026#39;bold\u0026#39; }, color = { fg = \u0026#39;#ffffff\u0026#39;, gui = \u0026#39;bold\u0026#39; } } -- Add components to right sections ins_right { function() return \u0026#34;WDS: \u0026#34; .. vim.fn.wordcount().words end, color = { fg = colors.OperaMauve } } ins_right { \u0026#39;o:encoding\u0026#39;, -- option component same as \u0026amp;encoding in viml fmt = string.upper, -- I\u0026#39;m not sure why it\u0026#39;s upper case either ;) cond = conditions.hide_in_width, color = { fg = colors.green, gui = \u0026#39;bold\u0026#39; } } ins_right { \u0026#39;fileformat\u0026#39;, icons_enabled = true, -- I think icons are cool but Eviline doesn\u0026#39;t have them. sigh color = { fg = colors.green, gui = \u0026#39;bold\u0026#39; } } ins_right { \u0026#39;fileformat\u0026#39;, fmt = string.upper, icons_enabled = false, -- I think icons are cool but Eviline doesn\u0026#39;t have them. sigh color = { fg = colors.green, gui = \u0026#39;bold\u0026#39; } } ins_right { \u0026#39;branch\u0026#39;, icon = \u0026#39;\u0026#39;, color = { fg = colors.violet, gui = \u0026#39;bold\u0026#39; } } ins_right { \u0026#39;diff\u0026#39;, -- Is it me or the symbol for modified us really weird symbols = { added = \u0026#39; \u0026#39;, modified = \u0026#39;柳 \u0026#39;, removed = \u0026#39; \u0026#39; }, diff_color = { added = { fg = colors.green }, modified = { fg = colors.orange }, removed = { fg = colors.red } }, cond = conditions.hide_in_width } ins_right { function() return \u0026#39;██\u0026#39; end, -- color = { fg = colors.blue }, color = function() -- auto change color according to neovims mode return { fg = mode_color[vim.fn.mode()] } end, padding = { left = 1 } } -- Now don\u0026#39;t forget to initialize lualine lualine.setup(config) Create config file ~/.config/nvim/lualine-config/init.lua: require(\u0026#39;lualine-config.eviline\u0026#39;) Require config in ~/.config/nvim/init.lua. require(\u0026#39;lualine-config\u0026#39;) See Also # Neovim Configuration with Lua "},{"id":16,"href":"/posts/nvim-tree/","title":"Nvim Tree","section":"Blog","content":" Nvim Tree # nvim-tree is a file explorer tree for neovim written in lua.\nInstallation # nvim-web-devicons is optional and used to display file icons. It requires a patched font.\nInstall using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;kyazdani42/nvim-web-devicons\u0026#39; use \u0026#39;kyazdani42/nvim-tree.lua\u0026#39; Configuration # Create config file ~/.config/nvim/nvim-tree-config/init.lua: ~/.config/nvim/lua/nvim-tree-config/init.lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 require(\u0026#34;nvim-tree\u0026#34;).setup({ diagnostics = { enable = true, }, view = { side = \u0026#39;right\u0026#39;, }, renderer = { add_trailing = false, group_empty = false, highlight_git = false, full_name = false, highlight_opened_files = \u0026#34;all\u0026#34;, root_folder_modifier = \u0026#34;:~\u0026#34;, indent_width = 2, indent_markers = { enable = true, inline_arrows = true, icons = { corner = \u0026#34;└\u0026#34;, edge = \u0026#34;│\u0026#34;, item = \u0026#34;│\u0026#34;, bottom = \u0026#34;─\u0026#34;, none = \u0026#34; \u0026#34;, }, }, icons = { webdev_colors = true, git_placement = \u0026#34;before\u0026#34;, padding = \u0026#34; \u0026#34;, symlink_arrow = \u0026#34; ➛ \u0026#34;, show = { file = true, folder = true, folder_arrow = true, git = true, }, glyphs = { default = \u0026#34;\u0026#34;, symlink = \u0026#34;\u0026#34;, bookmark = \u0026#34;\u0026#34;, folder = { arrow_closed = \u0026#34;\u0026#34;, arrow_open = \u0026#34;\u0026#34;, default = \u0026#34;\u0026#34;, open = \u0026#34;\u0026#34;, empty = \u0026#34;\u0026#34;, empty_open = \u0026#34;\u0026#34;, symlink = \u0026#34;\u0026#34;, symlink_open = \u0026#34;\u0026#34;, }, git = { unstaged = \u0026#34;✗\u0026#34;, staged = \u0026#34;✓\u0026#34;, unmerged = \u0026#34;\u0026#34;, renamed = \u0026#34;➜\u0026#34;, untracked = \u0026#34;★\u0026#34;, deleted = \u0026#34;\u0026#34;, ignored = \u0026#34;◌\u0026#34;, }, }, }, special_files = { \u0026#34;Cargo.toml\u0026#34;, \u0026#34;Makefile\u0026#34;, \u0026#34;README.md\u0026#34;, \u0026#34;readme.md\u0026#34; }, symlink_destination = true, }, }) Require config in ~/.config/nvim/init.lua. require(\u0026#39;nvim-tree-config\u0026#39;) See Also # Neovim Configuration with Lua "},{"id":17,"href":"/posts/neovim-colorscheme/","title":"Configure Neovim Colorscheme","section":"Blog","content":"In this case, I use Material theme.\nInstallation # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#39;marko-cerovac/material.nvim\u0026#39; Configuration # Create config file ~/.config/nvim/colors-config/material.lua: ~/.config/nvim/lua/colors-config/material.lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 require(\u0026#39;material\u0026#39;).setup({ contrast = { sidebars = true, -- Enable contrast for sidebar-like windows ( for example Nvim-Tree ) line_numbers = true, -- Enable contrast background for line numbers sign_column = true, -- Enable contrast background for the sign column cursor_line = true, -- Enable darker background for the cursor line non_current_windows = true, -- Enable darker background for non-current windows }, italics = { comments = true, -- Enable italic comments keywords = true, -- Enable italic keywords functions = true, -- Enable italic functions }, }) vim.g.material_style = \u0026#34;deep ocean\u0026#34; vim.cmd \u0026#39;colorscheme material\u0026#39; Require config in ~/.config/nvim/init.lua. require(\u0026#39;colors-config.material\u0026#39;) See Also # Neovim Configuration with Lua "},{"id":18,"href":"/posts/neovim-lua/","title":"Neovim Configuration with Lua","section":"Blog","content":" Neovim looks config file depend on OS, usually ~/.config/nvim/init.lua. You can place all configuration on config file (~/.config/nvim/init.lua). But for better files management, place it in separated file in ~/.config/nvim/lua/. Settings # Create config file ~/.config/nvim/lua/settings/init.lua: ~/.config/nvim/lua/settings/init.lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 local set = vim.opt set.number = true set.relativenumber = true set.expandtab = true set.smarttab = true set.shiftwidth = 2 set.tabstop = 2 set.hlsearch = true set.incsearch = true set.ignorecase = true set.smartcase = true set.splitbelow = true set.splitright = true set.wrap = false set.scrolloff = 5 set.fileencoding = \u0026#39;utf-8\u0026#39; set.termguicolors = true set.hidden = true set.cursorline = true set.colorcolumn = \u0026#39;81,121\u0026#39; set.guicursor = \u0026#39;i:hor50\u0026#39; Require config in ~/.config/nvim/init.lua. require(\u0026#39;settings\u0026#39;) Packer: Plugins Manager # Installation:\ngit clone --depth 1 https://github.com/wbthomason/packer.nvim\\ ~/.local/share/nvim/site/pack/packer/start/packer.nvim Create config file ~/.config/nvim/lua/packer-config/init.lua: 1 2 3 4 5 return require(\u0026#39;packer\u0026#39;).startup(function(use) use \u0026#39;wbthomason/packer.nvim\u0026#39; -- Place your plugins here ... end) Require config in ~/.config/nvim/init.lua. require(\u0026#39;packer-config\u0026#39;) You must run :PackerSync whenever you make changes to your plugin configuration:\nKeymaps # Create config file ~/.config/nvim/lua/mappings/init.lua: ~/.config/nvim/lua/mappings/init.lua 1 2 3 4 5 6 7 8 9 local map = vim.api.nvim_set_keymap local opts = { noremap = true, silent = true } -- vim.g.mapleader = \u0026#39;\\\\\u0026#39; map(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;leader\u0026gt;h\u0026#39;, \u0026#39;\u0026lt;C-w\u0026gt;h\u0026#39;, opts) map(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;leader\u0026gt;j\u0026#39;, \u0026#39;\u0026lt;C-w\u0026gt;j\u0026#39;, opts) map(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;leader\u0026gt;k\u0026#39;, \u0026#39;\u0026lt;C-w\u0026gt;k\u0026#39;, opts) map(\u0026#39;n\u0026#39;, \u0026#39;\u0026lt;leader\u0026gt;l\u0026#39;, \u0026#39;\u0026lt;C-w\u0026gt;l\u0026#39;, opts) Require config in ~/.config/nvim/init.lua. require(\u0026#39;mappings\u0026#39;) Which Key # Install using packer (place in ~/.config/nvim/lua/packer-config/init.lua): use \u0026#34;folke/which-key.nvim\u0026#34; Create config file ~/.config/nvim/lua/which-key-config/init.lua: ~/.config/nvim/lua/which-key-config/init.lua 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 local wk = require(\u0026#39;which-key\u0026#39;) local Terminal = require(\u0026#39;toggleterm.terminal\u0026#39;).Terminal local toggle_float = function() local float = Terminal:new({ direction = \u0026#34;float\u0026#34; }) return float:toggle() end local mappings = { w = { \u0026#34;:w\u0026lt;CR\u0026gt;\u0026#34;, \u0026#34;Save\u0026#34; }, q = { \u0026#34;:q\u0026lt;CR\u0026gt;\u0026#34;, \u0026#34;Quit\u0026#34; }, Q = { \u0026#34;:Q\u0026lt;CR\u0026gt;\u0026#34;, \u0026#34;Force Quit\u0026#34; }, x = { \u0026#34;:bd\u0026lt;CR\u0026gt;\u0026#34;, \u0026#34;Close Buffer\u0026#34; }, r = { \u0026#34;:luafile %\u0026lt;CR\u0026gt;\u0026#34;, \u0026#34;Reload file\u0026#34; }, h = { \u0026#34;Move Window Left\u0026#34; }, j = { \u0026#34;Move Window Down\u0026#34; }, k = { \u0026#34;Move Window Up\u0026#34; }, l = { \u0026#34;Move Window Right\u0026#34; }, o = { \u0026#39;:set paste\u0026lt;CR\u0026gt;m`o\u0026lt;Esc\u0026gt;``:set nopaste\u0026lt;CR\u0026gt;j\u0026#39;, \u0026#34;Insert New Line Below\u0026#34; }, O = { \u0026#39;:set paste\u0026lt;CR\u0026gt;m`O\u0026lt;Esc\u0026gt;``:set nopaste\u0026lt;CR\u0026gt;k\u0026#39;, \u0026#34;Insert New Line Above\u0026#34; }, p = { name = \u0026#34;Packer\u0026#34;, r = { \u0026#34;:PackerClean\u0026lt;cr\u0026gt;\u0026#34;, \u0026#34;Remove Unused Plugins\u0026#34; }, c = { \u0026#34;:PackerCompile profile=true\u0026lt;cr\u0026gt;\u0026#34;, \u0026#34;Recompile Plugins\u0026#34; }, i = { \u0026#34;:PackerInstall\u0026lt;cr\u0026gt;\u0026#34;, \u0026#34;Install Plugins\u0026#34; }, p = { \u0026#34;:PackerProfile\u0026lt;cr\u0026gt;\u0026#34;, \u0026#34;Packer Profile\u0026#34; }, s = { \u0026#34;:PackerSync\u0026lt;cr\u0026gt;\u0026#34;, \u0026#34;Sync Plugins\u0026#34; }, S = { \u0026#34;:PackerStatus\u0026lt;cr\u0026gt;\u0026#34;, \u0026#34;Packer Status\u0026#34; }, u = { \u0026#34;:PackerUpdate\u0026lt;cr\u0026gt;\u0026#34;, \u0026#34;Update Plugins\u0026#34; } }, } local opts = { prefix = \u0026#39;\u0026lt;leader\u0026gt;\u0026#39; } wk.register(mappings, opts) Require config in ~/.config/nvim/init.lua. require(\u0026#39;which-key-config\u0026#39;) "},{"id":19,"href":"/posts/concenate-ffmpeg/","title":"Concenate Files using FFMPEG","section":"Blog","content":" Example # Create file list echo file file1.mp4 \u0026gt; mylist.txt echo file file2.mp4 \u0026gt;\u0026gt; mylist.txt echo file file3.mp4 \u0026gt;\u0026gt; mylist.txt Concenate Files ffmpeg -f concat -i mylist.txt -c copy output.mp4 Sumber # Sumber "},{"id":20,"href":"/posts/adding-path/","title":"Adding Path on Linux","section":"Blog","content":" Bash export PATH=/directory/to/path:$PATH Fish add_to_path /directory/to/path "},{"id":21,"href":"/posts/screen-recording-using-ffmpeg/","title":"Screen Recording Using FFMPEG","section":"Blog","content":" Video Only # ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk {\u0026#39;print $2;\u0026#39;}) -i :0.0 out.mkv Audio Only # ffmpeg -f alsa -i default out.ogg Video \u0026amp; Audio # ffmpeg -f x11grab -s $(xdpyinfo | grep dimensions | awk {\u0026#39;print $2;\u0026#39;}) -i :0.0 -f alsa -i default out.mkv Sumber # Sumber "}]